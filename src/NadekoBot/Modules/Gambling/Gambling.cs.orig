using Discord;
using Discord.Commands;
using NadekoBot.Attributes;
using NadekoBot.Extensions;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NadekoBot.Services;
using NadekoBot.Services.Database.Models;
using System.Collections.Generic;
using ImageSharp;
using System.IO;
using System.Threading;

namespace NadekoBot.Modules.Gambling
{
    [NadekoModule("Gambling", "$")]
    public partial class Gambling : DiscordModule
    {
        public static string CurrencyName { get; set; }
        public static string CurrencyPluralName { get; set; }
        public static string CurrencySign { get; set; }

        public static string coloredNamesFile = System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory(), "ColoredNames.txt");

        static Gambling()
        {
<<<<<<< HEAD
            using (var uow = DbHandler.UnitOfWork())
            {
                var conf = uow.BotConfig.GetOrCreate();

                CurrencyName = conf.CurrencyName;
                CurrencySign = conf.CurrencySign;
                CurrencyPluralName = conf.CurrencyPluralName;
            }

            var nameColorTimer = new Timer(async (e) =>
            {
                await CheckForExpiredColors();
            }, null, 0, System.Convert.ToInt32(System.TimeSpan.FromHours(12).TotalMilliseconds));
        }

        public static async Task CheckForExpiredColors()
        {
            while (true)
            {
                if (System.IO.File.Exists(coloredNamesFile))
                {
                    int i = 0;
                    List<string> lines = File.ReadLines(coloredNamesFile).ToList();
                    lines = lines.Where(s => !string.IsNullOrWhiteSpace(s)).Distinct().ToList();
                    List<int> linesToRemove = new List<int>();
                    foreach (string line in lines)
                    {
                        if (line == null)
                        {
                            return;
                        }

                        System.String[] substrings = line.Split(',');
                        string userId = substrings[0];
                        System.DateTime expireDate = System.Convert.ToDateTime(substrings[1]);
                        if (expireDate < System.DateTime.Now)
                        {
                            try
                            {
                                IGuild guild = NadekoBot.Client.GetGuilds().First();
                                IGuildUser user = NadekoBot.Client.GetGuilds().First().GetUser(System.Convert.ToUInt64(userId));
                                if (user != null)
                                {
                                    await user.SendMessageAsync("Whoops! Looks like your colored name has just **expired**! Sorry about that! You can renew your colored name by buying it again at any time in the shop. (e.g. $shop namecolor red, or $shop namecolor #ff0000)");
                                    await clearColors(guild, user);
                                }

                                linesToRemove.Add(i);
                            }
                            catch (System.Exception e)
                            {
                                System.Console.WriteLine("Something went wrong in CheckForExpiredColors method.\n\nError:\n" + e);
                            }
                        }
                        i++;
                    }
                    if (linesToRemove.Count > 0)
                    {
                        int x = 0;
                        foreach (int lineNumber in linesToRemove)
                        {
                            lines.RemoveAt(lineNumber - x);
                            x++;
                        }
                        File.WriteAllLines(coloredNamesFile, lines);
                    }
                }
                await Task.Delay(System.DateTime.Now.AddHours(12).Millisecond);
            }
=======
            CurrencyName = NadekoBot.BotConfig.CurrencyName;
            CurrencyPluralName = NadekoBot.BotConfig.CurrencyPluralName;
            CurrencySign = NadekoBot.BotConfig.CurrencySign;
>>>>>>> refs/remotes/Kwoth/dev
        }

        public static long GetCurrency(ulong id)
        {
            using (var uow = DbHandler.UnitOfWork())
            {
                return uow.Currency.GetUserCurrency(id);
            }
        }

        bool ColorsAreClose(ImageSharp.Color a, ImageSharp.Color z, int threshold = 50)
        {
            int r = (int)a.R - z.R,
                g = (int)a.G - z.G,
                b = (int)a.B - z.B;
            return (r * r + g * g + b * b) <= threshold * threshold;
        }

        [NadekoCommand, Usage, Description, Aliases]
        [RequireContext(ContextType.Guild)]
        public async Task Raffle([Remainder] IRole role = null)
        {
            role = role ?? Context.Guild.EveryoneRole;

            var members = role.Members().Where(u => u.Status != UserStatus.Offline && u.Status != UserStatus.Unknown);
            var membersArray = members as IUser[] ?? members.ToArray();
            var usr = membersArray[new NadekoRandom().Next(0, membersArray.Length)];
            await Context.Channel.SendConfirmAsync("🎟 Raffled user", $"**{usr.Username}#{usr.Discriminator}**", footer: $"ID: {usr.Id}").ConfigureAwait(false);
        }

        [NadekoCommand, Usage, Description, Aliases]
        [Priority(0)]
        public async Task Cash([Remainder] IUser user = null)
        {
            user = user ?? Context.User;

            await Context.Channel.SendConfirmAsync($"{user.Username} has {GetCurrency(user.Id)} {CurrencySign}").ConfigureAwait(false);
        }

        [NadekoCommand, Usage, Description, Aliases]
        [Priority(1)]
        public async Task Cash(ulong userId)
        {
            await Context.Channel.SendConfirmAsync($"`{userId}` has {GetCurrency(userId)} {CurrencySign}").ConfigureAwait(false);
        }

        [NadekoCommand, Usage, Description, Aliases]
        [RequireContext(ContextType.Guild)]
        public async Task Give(long amount, [Remainder] IGuildUser receiver)
        {
            if (amount <= 0 || Context.User.Id == receiver.Id)
                return;
            var success = await CurrencyHandler.RemoveCurrencyAsync((IGuildUser)Context.User, $"Gift to {receiver.Username} ({receiver.Id}).", amount, false).ConfigureAwait(false);
            if (!success)
            {
                await Context.Channel.SendErrorAsync($"{Context.User.Mention} You don't have enough {CurrencyPluralName}.").ConfigureAwait(false);
                return;
            }
            await CurrencyHandler.AddCurrencyAsync(receiver, $"Gift from {Context.User.Username} ({Context.User.Id}).", amount, true).ConfigureAwait(false);
            await Context.Channel.SendConfirmAsync($"{Context.User.Mention} successfully sent {amount} {(amount == 1 ? CurrencyName : CurrencyPluralName)} to {receiver}!").ConfigureAwait(false);
        }

        [NadekoCommand, Usage, Description, Aliases]
        [RequireContext(ContextType.Guild)]
        [RequireUserPermission(GuildPermission.ManageMessages)]
        [Priority(2)]
        public Task Award(int amount, [Remainder] IGuildUser usr) =>
            Award(amount, usr.Id);

        [NadekoCommand, Usage, Description, Aliases]
        [RequireUserPermission(GuildPermission.ManageMessages)]
        [Priority(1)]
        public async Task Award(int amount, ulong usrId)
        {
            if (amount <= 0)
                return;

            await CurrencyHandler.AddCurrencyAsync(usrId, $"Awarded by bot owner. ({Context.User.Username}/{Context.User.Id})", amount).ConfigureAwait(false);

            await Context.Channel.SendConfirmAsync($"{Context.User.Mention} awarded {amount} {(amount == 1 ? CurrencyName : CurrencyPluralName)} to <@{usrId}>!").ConfigureAwait(false);
        }

        [NadekoCommand, Usage, Description, Aliases]
        [RequireContext(ContextType.Guild)]
        [RequireUserPermission(GuildPermission.ManageMessages)]
        [Priority(0)]
        public async Task Award(int amount, [Remainder] IRole role)
        {
            var channel = (ITextChannel)Context.Channel;
            var users = (await Context.Guild.GetUsersAsync())
                               .Where(u => u.GetRoles().Contains(role))
                               .ToList();
            await Task.WhenAll(users.Select(u => CurrencyHandler.AddCurrencyAsync(u.Id,
                                                      $"Awarded by bot owner to **{role.Name}** role. ({Context.User.Username}/{Context.User.Id})",
                                                      amount)))
                         .ConfigureAwait(false);

            await Context.Channel.SendConfirmAsync($"Awarded `{amount}` {CurrencyPluralName} to `{users.Count}` users from `{role.Name}` role.")
                         .ConfigureAwait(false);

        }

        [NadekoCommand, Usage, Description, Aliases]
        [RequireContext(ContextType.Guild)]
        [OwnerOnly]
        public async Task Take(long amount, [Remainder] IGuildUser user)
        {
            if (amount <= 0)
                return;

            if (await CurrencyHandler.RemoveCurrencyAsync(user, $"Taken by bot owner.({Context.User.Username}/{Context.User.Id})", amount, true).ConfigureAwait(false))
                await Context.Channel.SendConfirmAsync($"{Context.User.Mention} successfully took {amount} {(amount == 1 ? CurrencyName : CurrencyPluralName)} from {user}!").ConfigureAwait(false);
            else
                await Context.Channel.SendErrorAsync($"{Context.User.Mention} was unable to take {amount} {(amount == 1 ? CurrencyName : CurrencyPluralName)} from {user} because the user doesn't have that much {CurrencyPluralName}!").ConfigureAwait(false);
        }


        [NadekoCommand, Usage, Description, Aliases]
        [OwnerOnly]
        public async Task Take(long amount, [Remainder] ulong usrId)
        {
            if (amount <= 0)
                return;

            if (await CurrencyHandler.RemoveCurrencyAsync(usrId, $"Taken by bot owner.({Context.User.Username}/{Context.User.Id})", amount).ConfigureAwait(false))
                await Context.Channel.SendConfirmAsync($"{Context.User.Mention} successfully took {amount} {(amount == 1 ? CurrencyName : CurrencyPluralName)} from <@{usrId}>!").ConfigureAwait(false);
            else
                await Context.Channel.SendErrorAsync($"{Context.User.Mention} was unable to take {amount} {(amount == 1 ? CurrencyName : CurrencyPluralName)} from `{usrId}` because the user doesn't have that much {CurrencyPluralName}!").ConfigureAwait(false);
        }

        //[NadekoCommand, Usage, Description, Aliases]
        //[OwnerOnly]
        //public Task BrTest(int tests = 1000)
        //{
        //    var t = Task.Run(async () =>
        //    {
        //        if (tests <= 0)
        //            return;
        //        //multi vs how many times it occured
        //        var dict = new Dictionary<int, int>();
        //        var generator = new NadekoRandom();
        //        for (int i = 0; i < tests; i++)
        //        {
        //            var rng = generator.Next(0, 101);
        //            var mult = 0;
        //            if (rng < 67)
        //            {
        //                mult = 0;
        //            }
        //            else if (rng < 91)
        //            {
        //                mult = 2;
        //            }
        //            else if (rng < 100)
        //            {
        //                mult = 4;
        //            }
        //            else
        //                mult = 10;

        //            if (dict.ContainsKey(mult))
        //                dict[mult] += 1;
        //            else
        //                dict.Add(mult, 1);
        //        }

        //        var sb = new StringBuilder();
        //        const int bet = 1;
        //        int payout = 0;
        //        foreach (var key in dict.Keys.OrderByDescending(x => x))
        //        {
        //            sb.AppendLine($"x{key} occured {dict[key]} times. {dict[key] * 1.0f / tests * 100}%");
        //            payout += key * dict[key];
        //        }
        //        try
        //        {
        //            await Context.Channel.SendConfirmAsync("BetRoll Test Results", sb.ToString(),
        //                footer: $"Total Bet: {tests * bet} | Payout: {payout * bet} | {payout * 1.0f / tests * 100}%");
        //        }
        //        catch { }

        //    });
        //    return Task.CompletedTask;
        //}

        [NadekoCommand, Usage, Description, Aliases]
        public async Task BetRoll(long amount)
        {
            if (amount < 1)
                return;

            long userFlowers;
            using (var uow = DbHandler.UnitOfWork())
            {
                userFlowers = uow.Currency.GetOrCreate(Context.User.Id).Amount;
            }

            if (userFlowers < amount)
            {
                await Context.Channel.SendErrorAsync($"{Context.User.Mention} You don't have enough {CurrencyPluralName}. You only have {userFlowers}{CurrencySign}.").ConfigureAwait(false);
                return;
            }

            await CurrencyHandler.RemoveCurrencyAsync(Context.User, "Betroll Gamble", amount, false).ConfigureAwait(false);

            var rng = new NadekoRandom().Next(0, 101);
            var str = $"{Context.User.Mention} `You rolled {rng}.` ";
            if (rng < 67)
            {
                str += "Better luck next time.";
            }
            else if (rng < 91)
            {
                str += $"Congratulations! You won {amount * NadekoBot.BotConfig.Betroll67Multiplier}{CurrencySign} for rolling above 66";
                await CurrencyHandler.AddCurrencyAsync(Context.User, "Betroll Gamble", (int)(amount * NadekoBot.BotConfig.Betroll67Multiplier), false).ConfigureAwait(false);
            }
            else if (rng < 100)
            {
                str += $"Congratulations! You won {amount * NadekoBot.BotConfig.Betroll91Multiplier}{CurrencySign} for rolling above 90.";
                await CurrencyHandler.AddCurrencyAsync(Context.User, "Betroll Gamble", (int)(amount * NadekoBot.BotConfig.Betroll91Multiplier), false).ConfigureAwait(false);
            }
            else
            {
                str += $"👑 Congratulations! You won {amount * NadekoBot.BotConfig.Betroll100Multiplier}{CurrencySign} for rolling **100**. 👑";
                await CurrencyHandler.AddCurrencyAsync(Context.User, "Betroll Gamble", (int)(amount * NadekoBot.BotConfig.Betroll100Multiplier), false).ConfigureAwait(false);
            }

            await Context.Channel.SendConfirmAsync(str).ConfigureAwait(false);
        }

        [NadekoCommand, Usage, Description, Aliases]
        [RequireContext(ContextType.Guild)]
        [OwnerOnly]
        public async Task TestDate()
        {
            if (!System.IO.File.Exists(coloredNamesFile))
            {
                System.IO.File.WriteAllText(coloredNamesFile, "");
            }
            IEnumerable<System.String> lines = System.IO.File.ReadLines(coloredNamesFile);

            string message = "";
            int i = 0;
            bool userExists = false;
            foreach (string line in lines)
            {
                System.String[] substrings = line.Split(',');
                string userId = substrings[0];
                System.DateTime expireDate = System.Convert.ToDateTime(substrings[1]);

                if (i > 0)
                {
                    message += "\n";
                }
                message += "User ID " + userId + "'s color will expire on: " + expireDate;

                //IGuildUser user = await Context.Guild.GetUserAsync(System.Convert.ToUInt64(userId));
                //message += "User " + user.Mention + "'s color will expire on: " + expireDate;

                i++;
                if (Context.User.Id.ToString() == userId) { userExists = true; }
            }

            if (!userExists)
            {
                if (i > 0)
                {
                    System.IO.File.AppendAllText(coloredNamesFile, System.Environment.NewLine);
                    message += "\n";
                }
                System.IO.File.AppendAllText(coloredNamesFile, Context.User.Id.ToString() + "," + System.DateTime.Now.AddMonths(1).ToString());
                message += "User ID " + Context.User.Id.ToString() + "'s color will expire on: " + System.DateTime.Now.AddMonths(1).ToString();
            }
            i = 0;

            await Context.Channel.SendConfirmAsync(message).ConfigureAwait(false);
        }

        [NadekoCommand, Usage, Description, Aliases]
        [RequireContext(ContextType.Guild)]
        public async Task Shop(params string[] args) //string item, string shopparams, [Remainder] string extraparams = null
        {
            if (args.Count() == 0)
            {
                await Context.Channel.SendErrorAsync("❌ The parameters specified are **invalid.**").ConfigureAwait(false);
                return;
            }

            // Get user
            IGuildUser user = await Context.Guild.GetUserAsync(Context.User.Id);

            // Get users currency
            long userCurrency;
            using (var uow = DbHandler.UnitOfWork())
            {
                userCurrency = uow.Currency.GetOrCreate(Context.User.Id).Amount;
            }

            // Name Color Shop Item
            if (args[0] == "namecolor")
            {
                long cost = 30;
                bool custom = false;

                // Test if argument is a hex value
                int res;
                if (System.Int32.TryParse(args[1].Replace("#", ""), System.Globalization.NumberStyles.HexNumber, System.Globalization.CultureInfo.InvariantCulture, out res))
                {
                    cost = 60;
                    custom = true;
                }

                // Test if user has enough money
                if (userCurrency < cost)
                {
                    await Context.Channel.SendErrorAsync($"{Context.User.Mention} You don't have enough {Gambling.CurrencyPluralName}. You only have {userCurrency}{Gambling.CurrencySign} and need {cost}.\n\n{cost - userCurrency} more to go!").ConfigureAwait(false);
                    return;
                }

                // Get Color Roles
                IRole[] colorRoles = new IRole[11]
                {
                    Context.Guild.Roles.Where(r => r.Name == "red").FirstOrDefault(),
                    Context.Guild.Roles.Where(r => r.Name == "orange").FirstOrDefault(),
                    Context.Guild.Roles.Where(r => r.Name == "yellow").FirstOrDefault(),
                    Context.Guild.Roles.Where(r => r.Name == "brown").FirstOrDefault(),
                    Context.Guild.Roles.Where(r => r.Name == "green").FirstOrDefault(),
                    Context.Guild.Roles.Where(r => r.Name == "lime").FirstOrDefault(),
                    Context.Guild.Roles.Where(r => r.Name == "pink").FirstOrDefault(),
                    Context.Guild.Roles.Where(r => r.Name == "black").FirstOrDefault(),
                    Context.Guild.Roles.Where(r => r.Name == "white").FirstOrDefault(),
                    Context.Guild.Roles.Where(r => r.Name == "gold").FirstOrDefault(),
                    Context.Guild.Roles.Where(r => r.Name == "silver").FirstOrDefault()
                };

                // Presets
                if (colorRoles.Contains(Context.Guild.Roles.FirstOrDefault(r => r.Name == args[1])))
                {

                    await clearColors(Context.Guild, user);

                    var role = Context.Guild.Roles.FirstOrDefault(r => r.Name == args[1]);
                    await user.AddRolesAsync(role).ConfigureAwait(false);

                    await CurrencyHandler.RemoveCurrencyAsync(Context.User, "Bought Name Color", cost, false).ConfigureAwait(false);

                    await Context.Channel.EmbedAsync(
                        new EmbedBuilder().WithColor(role.Color)
                            .AddField(efb => efb.WithName($"You now have a {args[1]} name color!").WithValue($"{cost}{Gambling.CurrencySign} has been deducted from your account. Please come again!").WithIsInline(true)));
                }


                // Custom Name Color (EXTRA $$$)
                if (custom == true)
                {
                    if (string.IsNullOrWhiteSpace(user.Mention))
                        return;

                    await clearColors(Context.Guild, user);

                    // Turn color arg into actual color
                    var color = new ImageSharp.Color(args[1].Replace("#", ""));

                    // Get staff role colors for later color checking
                    try
                    {
                        var adminRole = new ImageSharp.Color(Context.Guild.Roles.Where(r => r.Name == "Admins").FirstOrDefault().Color.ToString());
                        var leadModRole = new ImageSharp.Color(Context.Guild.Roles.Where(r => r.Name == "Lead Moderator").FirstOrDefault().Color.ToString());
                        var modRole = new ImageSharp.Color(Context.Guild.Roles.Where(r => r.Name == "Moderators").FirstOrDefault().Color.ToString());
                        var trialModRole = new ImageSharp.Color(Context.Guild.Roles.Where(r => r.Name == "Trial Moderators").FirstOrDefault().Color.ToString());
                        var staffRole = new ImageSharp.Color(Context.Guild.Roles.Where(r => r.Name == "Staff").FirstOrDefault().Color.ToString());

                        // Test colors
                        try
                        {
                            if (ColorsAreClose(color, adminRole) || ColorsAreClose(color, leadModRole) || ColorsAreClose(color, modRole) || ColorsAreClose(color, trialModRole) || ColorsAreClose(color, staffRole))
                            {
                                await Context.Channel.SendErrorAsync("🚫 Your custom color is too similar to a staff color! Sorry about that, try another color!").ConfigureAwait(false);
                                return;
                            }
                        }
                        catch
                        {
                            await Context.Channel.SendMessageAsync("Failed testing colors").ConfigureAwait(false);
                        }
                    }
                    catch
                    {
                        await Context.Channel.SendErrorAsync("🚫 Error! (This was probably caused due to one of the staff roles not being set up right!)").ConfigureAwait(false);
                        return;
                    }

                    try
                    {
                        // Create role
                        var role = await Context.Guild.CreateRoleAsync(user.Mention).ConfigureAwait(false);

                        // Change newly created role's color, along with position/order
                        await role.ModifyAsync(r => r.Color = new Discord.Color(color.R, color.G, color.B)).ConfigureAwait(false);
                        await role.ModifyAsync(r => r.Position = 4).ConfigureAwait(false); //Apparently this is no longer working and is broken in the current API...

                        // Remove currency from user
                        await CurrencyHandler.RemoveCurrencyAsync(Context.User, "Bought Custom Name Color", cost, false).ConfigureAwait(false);

                        // Add newly created role to user
                        await user.AddRolesAsync(role).ConfigureAwait(false);

                        // Create custom color image to use in message
                        var img = new ImageSharp.Image(50, 50);
                        img.BackgroundColor(color);

                        //await Context.Channel.SendConfirmAsync($"You now have a custom name color with the color value of {color}!\n\n{cost}{Gambling.CurrencySign} has been deducted from your account. Please come again!").ConfigureAwait(false);
                        //await Context.Channel.SendFileAsync(img.ToStream(), $"{args[1].Replace("#", "")}.png", $"You now have a custom name color with the color value of {args[1]}!\n\n{cost}{Gambling.CurrencySign} has been deducted from your account. Please come again!");
                        await Context.Channel.EmbedAsync(
                            new EmbedBuilder().WithColor(role.Color)
                                .AddField(efb => efb.WithName($"You now have a custom name color with the color value of #{color.ToHex().Substring(0, color.ToHex().Length - 2)}!").WithValue($"{cost}{Gambling.CurrencySign} has been deducted from your account. Please come again!").WithIsInline(true)));
                    }
                    catch
                    {
                        var role = Context.Guild.Roles.Where(r => r.Name == user.Mention).FirstOrDefault();
                        await role.DeleteAsync().ConfigureAwait(false);

                        await Context.Channel.SendErrorAsync("⚠️ Unspecified error.").ConfigureAwait(false);
                    }
                }

                // Set Colored Name Expiration Date
                if (!System.IO.File.Exists(coloredNamesFile))
                {
                    System.IO.File.WriteAllText(coloredNamesFile, "");
                }

                List<string> lines = File.ReadLines(coloredNamesFile).ToList();
                List<int> linesToRemove = new List<int>();

                int i = 0;
                foreach (string line in lines)
                {
                    System.String[] substrings = line.Split(',');
                    string userId = substrings[0];

                    if (Context.User.Id.ToString() == userId)
                    {
                        linesToRemove.Add(i);
                    }

                    i++;
                }


                int x = 0;
                if (linesToRemove != null)
                {
                    foreach (int lineNumber in linesToRemove)
                    {
                        lines.RemoveAt(lineNumber - x);
                        x++;
                    }
                    File.WriteAllLines(coloredNamesFile, lines);
                }
                if ((x - i) > 0)
                {
                    System.IO.File.AppendAllText(coloredNamesFile, System.Environment.NewLine);
                }
                System.IO.File.AppendAllText(coloredNamesFile, Context.User.Id.ToString() + "," + System.DateTime.Now.AddMonths(1).ToString());
            }
        }

        public static async Task clearColors(IGuild guild, IGuildUser user)
        {
            // Get user's roles
            IRole[] userRoles = user.GetRoles().ToArray();

            // Get color roles
            IRole[] colorRoles = new IRole[11]
            {
                    guild.Roles.Where(r => r.Name == "red").FirstOrDefault(),
                    guild.Roles.Where(r => r.Name == "orange").FirstOrDefault(),
                    guild.Roles.Where(r => r.Name == "yellow").FirstOrDefault(),
                    guild.Roles.Where(r => r.Name == "brown").FirstOrDefault(),
                    guild.Roles.Where(r => r.Name == "green").FirstOrDefault(),
                    guild.Roles.Where(r => r.Name == "lime").FirstOrDefault(),
                    guild.Roles.Where(r => r.Name == "pink").FirstOrDefault(),
                    guild.Roles.Where(r => r.Name == "black").FirstOrDefault(),
                    guild.Roles.Where(r => r.Name == "white").FirstOrDefault(),
                    guild.Roles.Where(r => r.Name == "gold").FirstOrDefault(),
                    guild.Roles.Where(r => r.Name == "silver").FirstOrDefault()
            };
            // Clean up presets, in case there are any.
            foreach (IRole r in colorRoles)
            {
                if (user.GetRoles().Contains(r))
                {
                    await user.RemoveRolesAsync(r).ConfigureAwait(false);
                }
            }
            // just double check... sometimes it misses one... >.>
            foreach (IRole r in colorRoles)
            {
                if (user.GetRoles().Contains(r))
                {
                    await user.RemoveRolesAsync(r).ConfigureAwait(false);
                }
            }

            // Check if custom role exists
            var roleCheck = guild.Roles.Where(r => r.Name == user.Mention).FirstOrDefault();
            if (roleCheck != null)
            {
                var colorRole = guild.Roles.Where(r => r.Name == user.Mention).FirstOrDefault();
                await colorRole.DeleteAsync().ConfigureAwait(true);
            }
        }

        [NadekoCommand, Usage, Description, Aliases]
        public async Task Leaderboard()
        {
            var richest = new List<Currency>();
            using (var uow = DbHandler.UnitOfWork())
            {
                richest = uow.Currency.GetTopRichest(9).ToList();
            }
            if (!richest.Any())
                return;


            var embed = new EmbedBuilder()
                .WithOkColor()
                .WithTitle(NadekoBot.BotConfig.CurrencySign + " Leaderboard");

            for (var i = 0; i < richest.Count; i++)
            {
                var x = richest[i];
                var usr = await Context.Guild.GetUserAsync(x.UserId).ConfigureAwait(false);
                var usrStr = "";
                if (usr == null)
                    usrStr = x.UserId.ToString();
                else
                    usrStr = usr.Username?.TrimTo(20, true);

                embed.AddField(efb => efb.WithName("#" + (i + 1) + " " + usrStr).WithValue(x.Amount.ToString() + " " + NadekoBot.BotConfig.CurrencySign).WithIsInline(true));
            }

            await Context.Channel.EmbedAsync(embed).ConfigureAwait(false);
        }
    }
}
